{
  "name": "Scala-exemelle",
  "tagline": "Reasonable parser combinators for XML element streams",
  "body": "# exemelle #\r\nReasonable parser combinators for XML element streams\r\n\r\n# Usage #\r\n```sbt\r\nresolvers += Resolver.sonatypeRepo(\"snapshots\")\r\nlibraryDependencies += \"io.github.amrhassan\" %% \"exemelle\" % \"0.1.0-SNAPSHOT\"\r\n```\r\n\r\n```scala\r\nimport exemelle.StreamJob._\r\nimport exemelle.StreamParser\r\n\r\n// You can describe how you want to process the stream in terms of combinators found in\r\n// the StreamJob object\r\n\r\n// Perhaps you want to capture the XML elements numbered 11 to 15?\r\nval take5After10 = for {\r\n    _ <- drop(10)\r\n    elems <- take(5)\r\n  } yield elems\r\n  \r\n// or drop everything until you encounter the \"author\" starting tag then take 5 elem?\r\nimport cats.implicits._   // For the >> shorthand\r\nval dropUtilAuthor = dropUntil(_name == \"author\") >> take(5)\r\n\r\n// Or the full tag named \"book\"?\r\nval bookTag = findTagNamed(\"book\")\r\n\r\n// Or al the full tags named \"book\"?\r\nval allBookTags = findAllTagsNamed(\"book\")\r\n\r\n\r\n// You need parser implementation to parse through your stream\r\nimport scala.concurrent.ExecutionContext.Implicits.global\r\nval parser = StreamParser.fromInputStream(/* a java.io.InputStream */)\r\n\r\n// Now you can run one of the actions you've constructed earlier\r\nrun(parser)(allBookTags) // runs it into a Future[StreamError Xor Vector[Tag]]\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}